// Code generated by mockery v1.0.0. DO NOT EDIT.

package kafka

import mock "github.com/stretchr/testify/mock"
import sarama "github.com/Shopify/sarama"

// KafkaMock is an autogenerated mock type for the KafkaMock type
type KafkaMock struct {
	mock.Mock
}

// BatchConsume provides a mock function with given fields: topics, groupName, maxBufferSize, numberOfRoutines
func (_m *KafkaMock) BatchConsume(topics []string, groupName string, maxBufferSize int, numberOfRoutines int) (chan *sarama.ConsumerMessage, error) {
	ret := _m.Called(topics, groupName, maxBufferSize, numberOfRoutines)

	var r0 chan *sarama.ConsumerMessage
	if rf, ok := ret.Get(0).(func([]string, string, int, int) chan *sarama.ConsumerMessage); ok {
		r0 = rf(topics, groupName, maxBufferSize, numberOfRoutines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *sarama.ConsumerMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string, int, int) error); ok {
		r1 = rf(topics, groupName, maxBufferSize, numberOfRoutines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Consume provides a mock function with given fields: topic, groupName, maxBufferSize, numberOfRoutines
func (_m *KafkaMock) Consume(topic string, groupName string, maxBufferSize int, numberOfRoutines int) (chan *sarama.ConsumerMessage, error) {
	ret := _m.Called(topic, groupName, maxBufferSize, numberOfRoutines)

	var r0 chan *sarama.ConsumerMessage
	if rf, ok := ret.Get(0).(func(string, string, int, int) chan *sarama.ConsumerMessage); ok {
		r0 = rf(topic, groupName, maxBufferSize, numberOfRoutines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *sarama.ConsumerMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(topic, groupName, maxBufferSize, numberOfRoutines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields:
func (_m *KafkaMock) GetConfig() *sarama.Config {
	ret := _m.Called()

	var r0 *sarama.Config
	if rf, ok := ret.Get(0).(func() *sarama.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.Config)
		}
	}

	return r0
}

// GetLag provides a mock function with given fields: topic, consumerGroup
func (_m *KafkaMock) GetLag(topic string, consumerGroup string) (int64, error) {
	ret := _m.Called(topic, consumerGroup)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(topic, consumerGroup)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(topic, consumerGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Produce provides a mock function with given fields: topic, message
func (_m *KafkaMock) Produce(topic string, message interface{}) {
	_m.Called(topic, message)
}

// ProduceAndConsumeOnce provides a mock function with given fields: topic, message
func (_m *KafkaMock) ProduceAndConsumeOnce(topic string, message interface{}) error {
	ret := _m.Called(topic, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProduceSync provides a mock function with given fields: topic, message
func (_m *KafkaMock) ProduceSync(topic string, message interface{}) error {
	ret := _m.Called(topic, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
