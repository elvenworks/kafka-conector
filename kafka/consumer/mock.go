// Code generated by mockery v2.36.0. DO NOT EDIT.

package consumer

import (
	sarama "github.com/Shopify/sarama"
	mock "github.com/stretchr/testify/mock"
)

// IConsumer is an autogenerated mock type for the IConsumer type
type ConsumerMock struct {
	mock.Mock
}

// BatchConsume provides a mock function with given fields: topics, groupName, maxBufferSize, numberOfRoutines
func (_m *ConsumerMock) BatchConsume(topics []string, groupName string, maxBufferSize int, numberOfRoutines int) (chan *sarama.ConsumerMessage, error) {
	ret := _m.Called(topics, groupName, maxBufferSize, numberOfRoutines)

	var r0 chan *sarama.ConsumerMessage
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, string, int, int) (chan *sarama.ConsumerMessage, error)); ok {
		return rf(topics, groupName, maxBufferSize, numberOfRoutines)
	}
	if rf, ok := ret.Get(0).(func([]string, string, int, int) chan *sarama.ConsumerMessage); ok {
		r0 = rf(topics, groupName, maxBufferSize, numberOfRoutines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *sarama.ConsumerMessage)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, string, int, int) error); ok {
		r1 = rf(topics, groupName, maxBufferSize, numberOfRoutines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Consume provides a mock function with given fields: topic, groupName, maxBufferSize, numberOfRoutines
func (_m *ConsumerMock) Consume(topic string, groupName string, maxBufferSize int, numberOfRoutines int) (chan *sarama.ConsumerMessage, error) {
	ret := _m.Called(topic, groupName, maxBufferSize, numberOfRoutines)

	var r0 chan *sarama.ConsumerMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) (chan *sarama.ConsumerMessage, error)); ok {
		return rf(topic, groupName, maxBufferSize, numberOfRoutines)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) chan *sarama.ConsumerMessage); ok {
		r0 = rf(topic, groupName, maxBufferSize, numberOfRoutines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *sarama.ConsumerMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(topic, groupName, maxBufferSize, numberOfRoutines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsumeOffsetOldest provides a mock function with given fields: topic, groupName, maxBufferSize, numberOfRoutines
func (_m *ConsumerMock) ConsumeOffsetOldest(topic string, groupName string, maxBufferSize int, numberOfRoutines int) (chan *sarama.ConsumerMessage, error) {
	ret := _m.Called(topic, groupName, maxBufferSize, numberOfRoutines)

	var r0 chan *sarama.ConsumerMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) (chan *sarama.ConsumerMessage, error)); ok {
		return rf(topic, groupName, maxBufferSize, numberOfRoutines)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) chan *sarama.ConsumerMessage); ok {
		r0 = rf(topic, groupName, maxBufferSize, numberOfRoutines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *sarama.ConsumerMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(topic, groupName, maxBufferSize, numberOfRoutines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields:
func (_m *ConsumerMock) GetConfig() *sarama.Config {
	ret := _m.Called()

	var r0 *sarama.Config
	if rf, ok := ret.Get(0).(func() *sarama.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.Config)
		}
	}

	return r0
}

// GetLag provides a mock function with given fields: topic, consumerGroup
func (_m *ConsumerMock) GetLag(topic string, consumerGroup string) (int64, error) {
	ret := _m.Called(topic, consumerGroup)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int64, error)); ok {
		return rf(topic, consumerGroup)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(topic, consumerGroup)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(topic, consumerGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIConsumer creates a new instance of IConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerMock {
	mock := &ConsumerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
