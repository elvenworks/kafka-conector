// Code generated by mockery v2.36.0. DO NOT EDIT.

package producer_sync

import (
	sarama "github.com/Shopify/sarama"
	mock "github.com/stretchr/testify/mock"
)

// IProducerSync is an autogenerated mock type for the IProducerSync type
type ProducerSyncMock struct {
	mock.Mock
}

// GetConfig provides a mock function with given fields:
func (_m *ProducerSyncMock) GetConfig() *sarama.Config {
	ret := _m.Called()

	var r0 *sarama.Config
	if rf, ok := ret.Get(0).(func() *sarama.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.Config)
		}
	}

	return r0
}

// ProduceAndConsumeOnce provides a mock function with given fields: topic, message
func (_m *ProducerSyncMock) ProduceAndConsumeOnce(topic string, message interface{}) error {
	ret := _m.Called(topic, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProduceSync provides a mock function with given fields: topic, message
func (_m *ProducerSyncMock) ProduceSync(topic string, message interface{}) error {
	ret := _m.Called(topic, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProduceSyncWithMessageKey provides a mock function with given fields: topic, key, message
func (_m *ProducerSyncMock) ProduceSyncWithMessageKey(topic string, key interface{}, message interface{}) error {
	ret := _m.Called(topic, key, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}) error); ok {
		r0 = rf(topic, key, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIProducerSync creates a new instance of IProducerSync. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProducerSync(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProducerSyncMock {
	mock := &ProducerSyncMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
